.. SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com/>
..
.. SPDX-License-Identifier: CC-BY-NC-SA-4.0

.. _carbonio_auth:

============
|auth|
============

|auth| is the |product| component that influences the process of
accessing a |product| instance from the Login Page onwards, including
the access modality. Depending on the authentication backends
configured, the access mask changes, to allow user to provide their
credentials using any of the backends.

|auth| allows to manage all the Authentication Strategies
(user/pwd, SAML, 2FA, MobilePwd, QrCode) and Service Authorizations
supported by |product|.

This section is divided in three main parts and organised as follows.
Immediately below, you can find the description of all supported
authentication methods; the next two sections are dedicated to
:ref:`administration tasks <auth_zxauth-admins>`, which require
privileged access and are mostly carried out from the CLI, and
:ref:`auth-credential`.

.. _auth_supported_authentication_methods:

Supported Authentication Methods
================================

|auth| supports the following backends:

- Self service credentials management

  - Mobile password management

  - Application password

- SAML integration

- 2FA Authentication (using OTP token)

- Credential Management by CLI

.. grid:: 1 1 2 3
   :gutter: 1

   .. grid-item-card:: Self Service Credentials Management
      :columns: 12 12 6 6

      Self-service credential management allows every user to create new
      passwords and QR codes for third-parties—​for example team members,
      personal assistants—​accessing her/his email account and |Carbonio|
      Applications from mobile devices.

      QR Codes in particular can be used to access Mobile Apps, currently
      |team| and |file|.

   .. grid-item-card:: Two Factor Authentication
      :columns: 12 12 6 6

      Two Factor Authentication (usually spelled as **2FA**) adds a security
      layer to the login phase, making unwanted accesses less likely to take
      place. In |product|, this additional layer is given by an One Time
      Password (OTP), which can be read as a QR code on mobile devices.

      2FA applies only to those protocols or apps supporting it, for example
      HTTP and HTTPS but not to IMAP and SMTP, and can be configured at either
      device, IP, or IP range level, by means of the ``trusted_device`` or
      ``trusted_ip`` parameter. When an IP or IP range is trusted, 2FA will be
      successful for any login originating from there, while the
      ``trusted_device`` requires that the same browser or app be used,
      otherwise it will fail: if a 2FA login is carried out on Chrome,
      accessing the same page with Firefox will require a new login.

      In order to use the OTP, a domain must be configured (see
      Section :ref:`auth_requirements`) by the site Administrator.


   .. grid-item-card:: SAML
      :columns: 12

      The Security Assertion Markup Language (**SAML**) is an XML-based open
      standard data format for exchanging authentication information. It
      enables web-based authentication and authorization scenarios including
      cross-domain Single Sign-On (SSO), which allows the use of the same
      credentials to access different applications.

      SAML implementation in |product| relies on an external IDentity
      Provider (IDP), to which a user identifies; the IDP then passes
      authorization credentials to a service providers (SP). SAML
      authentication is the process of verifying the user’s identity
      and credentials. In |product|, SAML requires little
      configuration, because an administrator can generate the SAML
      configuration by importing SAML metadata from the ISP.  Each
      domain can have a different SAML endpoint and both SDP and IDP
      SAML authentication is supported.

      These are the key concepts of SAML authentication:

      Service Provider
         (SP) is the entity providing the service.

      Identity Provider
         (IdP) is the entity providing the identities.

      SAML Request
         is generated by the Service Provider to "request" an authentication.

      SAML Response
         is generated by the Identity Provider and contains the assertion of
         the authenticated user.

      Moreover, the Assertion Consumer Service (ACS) endpoint is a location to
      which the SSO tokens are sent, according to partner requirements.

      Directions on how to configure SAML and integrate other applications
      in |product| is described in Section :ref:`auth_set_up_saml`.

.. _auth_zxauth-admins:

|auth| for Admins
=================

This section is dedicated to administrators and the activities they
can carry out to manage and maintain |auth|. Here administrators can
find the requirements for the various authentication methods, then the
installation instructions and finally the credential management.

.. _auth_requirements:

Requirements
------------

In order to enable the authentication strategies available in
|carbonio|, the following requirements need to be satisfied.

.. note:: It is not necessary to enable all of them, simply configure
   the one you need in your infrastructure.

.. grid:: 1 1 2 4
   :gutter: 1

   .. grid-item-card:: QR Code Requirements
      :columns: 12 12 6 4

      The QR Code Application Password feature requires the following
      properties to be set at domain level in order to be functional:

      -  ``zimbraPublicServiceHostname``

      -  ``zimbraPublicServicePort``

      -  ``zimbraPublicServiceProtocol``

      Should one or more of the properties be unset, a notification will be
      delivered to the Admin reporting the affected domains and their missing
      properties.

   .. grid-item-card:: 2FA Requirements
      :columns: 12 12 6 4

      To enable 2FA it is necessary, **for all services**:

      - To define a ``trusted ip range``

      - To set the ``ip_can_change`` on ``true`` and ``2fa_policy`` to 1

      - To use ``Carbonio`` as the Authentication method: any other
        method (``local``, ``LDAP``, or ``AD``) will not suffice

   .. grid-item-card:: SAML Requirements
      :columns: 12 12 6 4

      There is no special requirement to enable SAML, besides
      having a SAML IDP Provider.

.. index:: Authentication by CLI; 2FA, 2FA Authentication; by CLI

.. _policy-management-2fa:

Setting up Policy Management for 2FA
------------------------------------

|auth| introduced the `second factor` as part of the service
authentication strategy. At domain or at global level, each service
can either:

* be enabled or disabled for the 2FA
* have its own Trusted Networks    

When enabled, the connection can be established only if the **source
is trusted**, which means that the connection originates either from a
**trusted network**, manually configured by the admin for the service,
or from a previously trusted IP or device, depending on the **2FA
policy configured for the service**.

If none of the above conditions holds, the service must ask for the
OTP, used as the second factor. If the service does not support the
second factor, or is not able to interact with the user for it, the
authentication process **fails**. For example, IMAP is a service not
supporting OTP and therefore 2FA can not be used with it.  Otherwise,
when the user provides a valid OTP, the current user’s device and IP
are stored in the Trusted Device table

Moreover, depending on the service policy, the connection should be
valid even if the IP has been trusted by another service.

2FA Policy Management is a rather advanced technique which avoids the
use of OTP in all cases when an authentication request is received
from a device that is already in the Trusted Networks or Trusted
Devices tables.

To set up and manage 2FA Policies, several CLI commands are available.

.. grid::
   :gutter: 3

   .. grid-item-card:: Display policies
      :columns: 12

      The command :command:`carbonio auth policy list` returns the list of 2FA
      by domain, with option to filter specific services.

      |ex|

      .. code:: console

         zextras$ carbonio auth policy list domain example.com service EAS

      Shows 2FA setting for domain **example.com** and for service
      **EAS**.

      |ex|
      
      .. code:: console

         zextras$ carbonio auth policy list global

      Display for which services 2FA can be enabled. As a bonus, the
      output contains a lists of **all** supporter services, which
      fall in:

      * standard protocols or technologies (CLI, |dav|, |eas|, |imap|,
        |pop|, and |smtp|)
      * related to |carbonio| components (MobileApp, WebAdminUI,
        WebUI).
         
   .. grid-item-card:: Manage policies
      :columns: 12
      
      The command :command:`carbonio auth policy set` enables or
      disables a service and accepts the following three optional
      parameters:

      ``ip_can_change``                     
         This attribute allows the server to deny connection requests
         coming from an IP other than the one used during the
         authentication. As an example, suppose that authentication
         was successfully carried out from a device with IP
         192.168.1.72 and for any reason the IP of the device changes
         (e.g., a laptop moved to a different subnet). If
         ``ip_can_change`` is set to **true**, then the device is
         still authenticated and connections are allowed, otherwise,
         if ``ip_can_change`` is set to **false**, authentication is
         invalidated and no connection is allowed for the device until
         a new authentication.

      ``trusted_ip_range``
         It defines the **Trusted Networks**, a set of IP ranges
         configured for each service (like e.g., DAV, EAS, SMTP, and
         more). If a connection comes from an IP in the Trusted
         Networks, the authentication will not require the second
         factor validation, independently from the policy specified,
         but users will be authenticated with username and password.

      ``2fa_policy``
         This parameter determines how 2FA policies are enforced for
         each service and takes one of these three integer values:

         * **0** (no_2fa): 2FA authentication is disabled for the
           service

         * **1** (ip_2fa): Trust the **IP** from which the connection
           starts. All the subsequent logins from the same IP will not
           require the second factor.

         * **2** (device_2fa): Trust the **device** from which the
           connection starts. All the subsequent logins from the same
           device (that is, same browser or Mobile App) will not
           require the second factor.

      These parameters are supported by all services.
      
   .. grid-item-card:: Manage expiration time
      :columns: 12

      Two commands help to check and define the expiration time of
      trusted devices.

      .. card:: ``getExpiration``
         
         Check the current policy for expiration time, i.e., for how
         long a device will be considered as trusted. The number of
         **days** is returned. The command acts at domain and global
         level.

         .. rubric:: Example

         .. code:: console

            zextras$ carbonio auth policy trustedDevice getExpiration domain example.com

         Show how many days is the expiration time for `example.com`.
         
         .. rubric:: Example

         .. code:: console

            zextras$ carbonio auth policy trustedDevice getExpiration global

         Show how many days is the expiration time for the whole
         infrastructure.
         
      .. card:: ``setExpiration``
         
         Define the current policy for expiration time, i.e., for how
         long a device will be considered as trusted. The number of
         **days** is required. The command acts at domain and global
         level.

         .. rubric:: Example

         .. code:: console

            zextras$ carbonio auth policy trustedDevice setExpiration domain example.com 20

         Defines the expiration time for domain example.com to **20 days**.

.. index:: Authentication by CLI; SAML, SAML Authentication; by CLI

.. _auth_set_up_saml:

Setting up SAML Configuration
-----------------------------

To integrate a SAML application into |product|, you need to configure the
SAML IDP (IDentity Provider) using the SAML SP data. In our
sample scenario, we want to add SAML authentication to our domain
**example.com**, accessible at **SP_URL**.

.. seealso:: The same tasks can be carried out from the |adminui|,
   please refer to Section :ref:`domain-saml`.

The SAML configuration is carried out at an IDP provider, then
imported in |product| using a dedicated command.

The most important configuration options are the following. You should
configure them on the SAML IDP side.

``sp.entityid``
   **https://SP_URL/zx/auth/samlMetadata?domain=example.com**

``sp.assertion_consumer_service.url``
   **https://SP_URL/zx/auth/saml**

``sp.nameidformat``
   **urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress**

In order to validate against |product|, make sure that the *Name of the
attribute that is used as* ``NameID`` is set to **mailPrimaryAddress**.

You can now integrate a SAML application in |product| in two ways, either
automatic or manual. The following sections describe each method in
detail.

.. _auth_import_saml_configuration_automatically:

Import SAML Configuration Automatically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SAML IDP provides a URL from which to download the configuration;
assuming that this URL is
https://my-saml-provider.org/simplesaml/saml/idp/metadata.php, you can
import the configuration using the command:

.. code:: console

   zextras$ carbonio auth saml import example.com URL  https://my-saml-provider.org/simplesaml/saml/idp/metadata.php

.. note:: The URL supplied by the SAML IDP for an unsecured connection
   may be slight different from the previous one, like in our example.

.. code:: console

   zextras$ carbonio auth saml import example.com URL https://localidp.local.loc/app/xxxxxxxxxxxxxxx/sso/saml/metadata allow_unsecure true

You are now DONE! You can see the :bdg-primary-line:`LOGIN SAML` button on the login page.

.. card::
   :width: 100%

   .. figure:: /img/auth/saml-login.png
      :align: center
      :width: 100%


      Login page with enabled SAML.

By clicking it, you will be redirect to the SAML IDP login page.

.. _auth_import_saml_configuration_manually:

Import SAML Configuration Manually
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you need to manually edit the SAML configuration, you need to
follow this 4-step procedure. In a nutshell, you need to export the
default SAML settings, modify them, then save and import them back.

.. grid:: 1 1 1 2
   :gutter: 3

   .. grid-item-card:: Step 1. Export the default SAML settings
      :columns: 12 12 12 6

      In order to export the default SAML setting, use

      .. code:: console

         zextras$ carbonio auth saml get example.com export_to /tmp/saml.json

   .. grid-item-card:: Step 2. Modify :file:`/tmp/saml.json`
      :columns: 12 12 12 6

      Open the resulting file :file:`/tmp/saml.json` in any editor and modify
      the requested attributes:


      - ``entityid``

      - ``assertion_consumer_service.url``

      - ``nameidformat``

   .. grid-item-card:: Step 3. Check modified :file:`/tmp/saml.json`
      :columns: 12 12 12 6

      The :file:`/tmp/saml.json`` file should look similar to this
      one:

      .. dropdown:: Simple ``saml.json`` file
         :open:

         .. code:: json


            {
              "sp.entityid":"https://SP_URL/zx/auth/samlMetadata?domain=example.com",
              "sp.assertion_consumer_service.url":"https://SP_URL/zx/auth/saml",
              "sp.nameidformat":"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
              "sp.assertion_consumer_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
              "sp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
              "sp.single_logout_service.url":"https://SP_URL/?loginOp=logout",
              "sp.x509cert":"aabbcc",

              "idp.entityid":"https://IDP-URL/simplesamlphp/saml2/idp/metadata.php",
              "idp.x509cert":"xxyyzz",
              "idp.single_sign_on_service.url":"https://IDP-URL/simplesamlphp/saml2/idp/SSOService.php",
              "idp.single_sign_on_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
              "idp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",

              "organization.name":"ACME, INC.",
              "organization.displayname":"Example",
              "organization.url":"https://www.example.com/",

              "security.requested_authncontextcomparison":"exact",
              "security.signature_algorithm":"http://www.w3.org/2000/09/xmldsig#rsa sha1",
              "security.want_nameid_encrypted":"false",
              "security.want_assertions_encrypted":"false",
              "security.want_assertions_signed":"false","debug":"true",
              "security.want_messages_signed":"false",
              "security.authnrequest_signed":"false",
              "security.want_xml_validation":"true",
              "security.logoutrequest_signed":"false"
              "security.logoutresponse_signed":"false",
            }

      Values appearing in the above code excerpt are taken from the
      example in the previous section. Certificates must be valid,
      they are omitted for clarity.

   .. grid-item-card:: Step 4. Save the changes
      :columns: 12 12 12 6

      The final step is to save the changes made to the file and import
      it into |product| using the command:

      .. code:: console

         zextras$ carbonio auth saml import example.com file /tmp/saml.json

      .. hint:: It is also possible to view or edit single attributes
         by using the ``carbonio auth saml get`` and ``carbonio auth saml
         set`` command options.

.. _auth-saml-logout:

Configure SAML Logout
~~~~~~~~~~~~~~~~~~~~~

Some SAML IDP provider require that also the logout procedure be
signed. In case you had already configured SAML, you can proceed in a
similar fashion as described in the :ref:`previous section
<auth_import_saml_configuration_manually>`: export the configuration,
modify it, then import it again.

Here we show how to add signed logout to the configuration used in the
previous section, by modifying the configuration file
:file:`saml.json` presented there.

.. note:: We also report below the configuration file presented in the
   previous section, modified according to the procedure described
   below and with the lines interested by the changes highlighted. The
   line numbers are those

First, you need to configure the SAML IDP logout service URL (line
**7**, :bgreen:`sp.single_logout_service.url`). We use :abbr:`Okta
(www.okta.com)` as example SAML IDP provider, so the URL will be
similar to https://mycompany.okta.com/app/test/app_id/slo/saml.

Then, configure also the service provider's certificate,
:bgreen:`sp.x509cert` (line **8**), which however should be already
present.

At this point, you should be done and you can import the modified
configuration file.

However, in case the SAMP IDP requires that also the requests be
signed, or in case to sign the requests for security reasons, please
follow these additional steps.

* Create a new X509 certificate and register it to the SAML IDP. You
  can use a command similar to the following one to create one with
  :command:`openssl`

  .. code-block:: console

     # openssl req -x509 -sha256 -nodes -days 365  \
     -newkey rsa:2048 -keyout privateKey.key -out certificate.crt

* Add to the configuration file the certificate as
  :bgreen:`sp.x509cert` and the private key as :bgreen:`sp.privatekey`
  (lines **8** and **9** respectively)

* Enable the signature generation, that is, set
  :bgreen:`security.logoutrequest_signed` to ``true`` (line **30**)

* You can also optionally enable the signature for the login request,
  by setting :bgreen:`security.authnrequest_signed` ``to true`` (line
  **32**)


.. dropdown:: ``saml.json`` file with signed logout and requests.
   :open:

   .. code-block:: json
      :linenos:
      :emphasize-lines: 7,8,9,30,32

      {
        "sp.entityid":"https://SP_URL/zx/auth/samlMetadata?domain=example.com",
        "sp.assertion_consumer_service.url":"https://SP_URL/zx/auth/saml",
        "sp.nameidformat":"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
        "sp.assertion_consumer_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
        "sp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
        "sp.single_logout_service.url":"https://mycompany.okta.com/app/test/app_id/slo/saml",
        "sp.x509cert":"aabbcc",
        "sp.privatekey":"ddeeff",

        "idp.entityid":"https://IDP-URL/simplesamlphp/saml2/idp/metadata.php",
        "idp.x509cert":"xxyyzz",
        "idp.single_sign_on_service.url":"https://IDP-URL/simplesamlphp/saml2/idp/SSOService.php",
        "idp.single_sign_on_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
        "idp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",

        "organization.name":"ACME, INC.",
        "organization.displayname":"Example",
        "organization.url":"https://www.example.com/",

        "security.requested_authncontextcomparison":"exact",
        "security.signature_algorithm":"http://www.w3.org/2000/09/xmldsig#rsa sha1",
        "security.want_nameid_encrypted":"false",
        "security.want_assertions_encrypted":"false",
        "security.want_assertions_signed":"false","debug":"true",
        "security.want_messages_signed":"false",
        "security.authnrequest_signed":"false",
        "security.want_xml_validation":"true",
        "security.logoutrequest_signed":"true"
        "security.logoutresponse_signed":"true",
        "security.authnrequest_signed":"true",
      }

.. _auth-saml-access:

Access a Service Using SAML
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once SAML authentication has been properly configured on both the SP
and IDP sides, it is possible to access to a |product| resource using
different modalities:

#. Login to the IDP portal and click on the resource you want to
   access.

#. Directly go to the service's web page and click the
   :bdg-primary-line:`SAML LOGIN` button that appears near the
   username and password fields

   .. note:: The label on the button might slight differ, depending on
      IPD and configuration.

#. Use the direct link to the SAML authentication of the service. For
   example, given a |product| installation (the Service) located at
   **mail.example.com**, and provided you are already authenticated to
   the IDP, it is possible to access the mailbox by using the link
   https://mail.example.com/zx/auth/startSamlWorkflow?redirectUrl=https://mail.example.com/carbonio/mails

   .. hint:: By replacing the URL after the ``redirectUrl`` it is
      possible to allow direct access to other |carbonio| components,
      for example:
      https://mail.example.com/zx/auth/startSamlWorkflow?redirectUrl=https://mail.example.com/carbonio/files
      will open the |file| component.

.. _auth-saml-azure:

Example: Configure SAML on Azure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this section we configure SAML on an Azure portal (the Identity
Provider, *IDP*) to allow SSO access to a |product| installation (the
Service Provider, *SP*). This procedure requires to configure first
the Azure portal using a few values from |product| installation, then
configure |product| to use the Azure portal as SAML provider.

.. card:: Configure Azure Portal

   On the Azure Portal you need to configure the following values on
   **Basic SAML Configuration**. From your |product| installation you
   need to know the :bdg-secondary-line:`carbonio-hostname` and the
   :bdg-secondary-line:`carbonio-domain`.

   .. list-table::
      :header-rows: 1

      * - Value
	- Option
      * - Identifier (Entity ID)
	- ``https://carbonio-hostname/zx/auth/samlMetadata?domain=carbonio-domain``
      * - Reply URL
	- ``https://carbonio-hostname/zx/auth/saml/?domain=carbonio-domain``
      * - Sign on URL
	- `You can leave this empty`
      * - Relay State
	- ``https://carbonio-hostname/``
      * - Logout URL
	- ``https://carbonio-hostname/zx/auth/logout``

   Next, in **Attributes & Claims**, configure
   
   .. list-table::
      :header-rows: 1

      * - Value
	- Option
      * - Unique User Identifier
	- ``user.mail``

   As an optional step, you can upload an X.509 :abbr:`CSR
   (Certificate Signing Request)` Certificate in case you want to
   enable certificate signing.

   The configuration on the Azure side is now complete. From here, you
   need the following data for |product|'s configuration.

   * :bdg-secondary-line:`Azure_AD_ID` the identifier of the Azure AD
   * :bdg-secondary-line:`SAML_cert` the certificate used for the
     connection between azure and |product|
   * :bdg-secondary-line:`Azure_login_URL` the login URL of the Azure
     Portal
   * :bdg-secondary-line:`Azure_logout_URL` the logout URL of the
     Azure Portal

.. card:: Configure |product|

   The configuration on the |product| side is currently possible from
   the CLI only. Therefore, copy the :bdg-secondary-line:`SAML_cert`
   on the |product| installation, then log in to it as the ``zextras``
   user. The SAML configuration is carried out by means of the
   :command:`carbonio admin saml update` command. 

   .. note:: to keep consistency with the rest of the documentation,
      we will use in the commands the value **example.com** for the
      :bdg-secondary-line:`carbonio-domain` in the commands listed
      below.
			  
   The options to configure are these four: 

   #. ``idp.entityid`` using :bdg-secondary-line:`Azure_AD_ID`
      
      .. code:: console

	 zextras$ carbonio admin saml update example.com \
	 idp.entityid Azure_AD_ID

   #. ``idp.x509cert`` using the path to the uploaded
      :bdg-secondary-line:`SAML_cert`
      
      .. code:: console

	 zextras$ carbonio admin saml update example.com \
	 idp.x509cert SAML_cert

   #. ``idp.single_sign_on_service.url`` using
      :bdg-secondary-line:`Azure_login_URL`

      .. code:: console
	 
	 zextras$ carbonio admin saml update example.com \
	 idp.single_sign_on_service.url Azure_login_URL

   #. ``idp.single_logout_service.url`` using
      :bdg-secondary-line:`Azure_logout_URL`
      
      .. code:: console

	 zextras$ carbonio admin saml update example.com \
	 idp.single_logout_service.url Azure_logout_URL

   As an optional step to enable certificate signing, you need the
   private key that refers to the X.509 certificate and configure
   the following variables, similarly to what has been done above.

   * ``sp.x509cert`` is the path to :bdg-secondary-line:`SAML_cert`
   * ``sp.privatekey`` is the private key you have generated with
     ``sp.x509cert``
   * ``security.logoutresponse_signed`` ,
     ``security.logoutrequest_signed``, and
     ``security.authnrequest_signed`` must all be set to **true**

Corner Cases of 2FA
-------------------

2FA is a popular mechanism to allow users a secure login to an
infrastructure, based on a temporary token (usually in the form of a
QR code) besides the usual user/password combination.

There are however a few cases in which 2FA can not be used: consider
for example a domain or mailstore on which 2FA is enabled, but there
is an application that wants or needs to use the SMTP service: since
SMTP does not support 2FA, the application would not work.

To avoid situation like this, which may involve any service or
protocol not supporting 2FA (like, e.g., the above mentioned SMTP or
SOAP), on |product|, an Administrator can create suitable credentials
that can be used by the application to operate correctly.

.. _auth-credential:

Credential Management
=====================

Within |product|, a **credential** is something that allows access to
one of its services or modules.

|product| Auth’s Credential Management system allows to create
dedicated passwords to access different services such as |EAS| devices,
Mobile Applications (e.g., |team| and |file|), or IMAP/SMTP.

It is also possible to share the access to a service with other
colleagues, team members, or even third-party persons by simply creating
a new authentication means (e.g., a QR code for mobile access) for the
service, without the need to share the password. Once the access for
these persons is not needed anymore, it suffices to delete the
authentication means to revoke the access.

This also implies, as an additional advantage, that users are able to
decide who can have access to the same services they use, providing a
high level of granularity also at user level.

In the remainder of this section, we show a few common and relevant
tasks that an administrator can carry out, followed by a couple of
examples.

.. warning:: While Administrators can set the password of any user
   account on the command line when they create the credentials, **In
   no other circumstances** they have access to the password, not even
   for changing it.

.. _services_supported:

Services Supported
------------------

Zextras Auth allows to create or update custom passwords for the
following services:

.. csv-table::

   "EAS", "Mobile Password"
   "WebUI", "Zextras Auth Login Page"
   "WebAdminUI", "Admin Console"
   "MobileApp", "Zextras Mobile Apps"
   "Dav", "Zextras LDAP Address Book"
   "SMTP", "SMTP Authentication"
   "IMAP", "IMAP Authentication"
   "POP3", "POP3 Authentication"


Administrators can combine these services to set up multiple basic to
complex scenarios, including:

- enable only WebAccess

- enable IMAP without SMTP

- enable IMAP/SMTP only for managed client (pre-setup without the
  user)

- create SMTP password that are not enabled for Web/Soap/Imap access,
  to be used for automation or external services


.. grid:: 1 1 2 2
   :gutter: 1

   .. grid-item-card:: Add New Credential
      :columns: 6

      New credentials for each of the active authentication services
      can be added using the :command:`carbonio auth credential add`
      command:

      .. code:: console

         zextras$ carbonio auth credential add john@example.com [param VALUE[,VALUE]]

   .. grid-item-card:: List Existing Credential
      :columns: 6

      System Administrators can view an extended list of all
      credentials active on an account by using the :command:`carbonio
      auth credential list` command:

      .. code:: console

         zextras$ carbonio auth credential list john@example.com

      This command gives **no access** to the user’s passwords: they
      are never shown.

      The output of this command can be quite long, because it shows
      all the credentials configured for an account, including a
      number of additional information.

   .. grid-item-card:: Edit a Credential
      :columns: 6

      While usually the credential itself cannot be edited, the System
      Administrator can update its label and properties, including the
      services for which it is valid, by using the :command:`carbonio
      auth credential update` command:

      .. code:: console

         zextras$ carbonio auth credential update john@example.com [param VALUE[,VALUE]]

      The successful credential update will be displayed as output of the
      previous command, reporting all credential’s properties:

      .. code::

         Credential Fr2jM updated

                 values
                         generated           0
                         created             Wed 05 May 2021 at 17:53:38
                         label               New Label
                         id                  aKcLK
                         services            EAS
                         hash                +Crk6YcPL7IapCg6xfT6oXWP977uTeZdJTVQDQZd+Io=
                         enabled             true
                         algorithm           SHA256

   .. grid-item-card:: Delete a Credential
      :columns: 6

      Credentials can be delete, once at a time using the :command:`carbonio
      auth credential delete` command:

      .. code:: console

         zextras$ carbonio auth credential delete john@example.com password_id

      .. hint:: The ``password_id`` is shown as ``id`` in the
         :command:`carbonio auth credential list` command.

.. _examples-credential-management:

Examples
--------

In this section we present a few examples

#. create a password and a label for user john\@example.com who can
   access service EAS (mobile password).

   .. code:: bash

      zextras$ carbonio auth credential add john@example.com password 'easpass' label "Smartphone" service eas
      Credential correctly added

      list
         generated 0
         created 1620892109473
         label Smartphone
         id aKcLK
         services EAS
         hash 6Fs6knbW1+fJmWMB1nKoCgLFPy+IGsuZGtmkW0NzV4A=
         enabled true
         algorithm SHA256
      text_data
         auth_method password
         password easpass
         user john@example.com

   -  ``generated`` - whether the credential was randomly generated or not,
      0 true and 1 means false

   -  ``created`` - the creation timestamp

   -  ``label`` - the label, useful to remember the purpose or user of the
      credentials

   -  ``id`` - the unique ID, which is mandatory to edit or update the
      credentials. It is called ``password_id`` in the commands, to
      prevent misunderstandings.

   -  ``services`` - the services for which access is allowed

   -  ``hash`` - the hashed credential itself

   -  ``enabled`` - whether the credential can be actually used or not

   -  ``algorithm`` - the hashing algorithm used

   -  ``password`` - the password assigned or randomly generated. As
      mentioned, this is the **only** occasion that the administrator can
      see a user’s password

#. Create a password for jane\@example.com, that can be used only for Web
   Access (Zextras Login Page)

   .. code:: console

      zextras$ carbonio auth credential add jane@example.com password \
      'SecretPassword!' label "Web access" service WebUI

#. Create a password for alice\@example.com that can be used only for
   IMAP and POP3 download (no SMTP)

   .. code:: console

      zextras$ carbonio auth credential add alice@example.com password \
      'LocalClient' service imap,pop3

#. Create a password for bob\@example.com/SMTP_Service_Credential can be
   used to enable SMTP for an external client

   .. code:: console

      zextras$ carbonio auth credential add bob@example.com password \
      'SMTP_Service_Credential' service smtp

#. An important parameter is ``qrcode``, to create a new QR code to be
   used by mobile devices, provided QR code support :ref:`has been
   enabled <auth_requirements>`. Used together with the ``--json``
   switch, it will show the QR code’s payload as well. An example is:

   .. code:: console

      zextras$ carbonio auth credential add charles@example.com password \
      'SMTP_Service_Credential' qrcode true service smtp
